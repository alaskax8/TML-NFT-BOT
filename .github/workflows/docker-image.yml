on:
  push:
    branches:
      - master
  
env:
  DISCORD_ALL: ${{ secrets.DISCORD_ALL }}
  DISCORD_WEBHOOK_REFLECTION: ${{ secrets.DISCORD_WEBHOOK_REFLECTION }}
  DISCORD_WEBHOOK_LETTER: ${{ secrets.DISCORD_WEBHOOK_LETTER }}
  DISCORD_WEBHOOK_SYMBOL: ${{ secrets.DISCORD_WEBHOOK_SYMBOL }}
  DISCORD_WEBHOOK_AURIC: ${{ secrets.DISCORD_WEBHOOK_AURIC }}

jobs:
  build:
    runs-on: [self-hosted, partypooper]
    name: Checkout code and build container
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build containers from Dockerfile and run tests
        run: |
          docker-compose -f docker-compose-prod.yaml build

  trivy-scan:
    runs-on: [self-hosted, partypooper]
    name: Scan container with trivy
    needs: build
    steps:
      - uses: aquasecurity/trivy-action@master
        id: trivy-scan
        with:
          image-ref: "tml-nft-bot2:${{ github.sha }}"
          format: "table"
          exit-code: "0" # Set the exit-code parameter to "0" to allow failure notification

  check-trivy-status:
    runs-on: [self-hosted, partypooper]
    name: Check Trivy scan status
    needs: trivy-scan
    if: ${{ needs.trivy-scan.outputs.result != 'success' }}
    steps:
      - name: Set Trivy scan status
        id: set-trivy-status
        run: echo "::set-output name=result::failure"

  env-files:
    runs-on: [self-hosted, partypooper]
    name: Create env files
    needs: [trivy-scan, check-trivy-status]
    if: ${{ needs.check-trivy-status.outputs.result != 'failure' }}
    steps:
      - name: Create env file for front
        run: |
          touch .env
          echo DISCORD_ALL=${{ secrets.DISCORD_ALL }} >> .env
          echo DISCORD_WEBHOOK_REFLECTION=${{ secrets.DISCORD_WEBHOOK_REFLECTION }} >> .env
          echo DISCORD_WEBHOOK_LETTER=${{ secrets.DISCORD_WEBHOOK_LETTER }} >> .env
          echo DISCORD_WEBHOOK_SYMBOL=${{ secrets.DISCORD_WEBHOOK_SYMBOL }} >> .env
          echo DISCORD_WEBHOOK_AURIC=${{ secrets.DISCORD_WEBHOOK_AURIC }} >> .env
          

  deploy:
    runs-on: [self-hosted, partypooper]
    name: Deploy to swarm, cleanup and post notification
    needs: env-files
    steps:
      - name: Deploy
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: docker-compose -f docker-compose-prod.yaml up -d

      - name: Clean up
        if: always()
        run: |
          rm -f .env

      - name: Post status notification to Discord
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          title: "QueIT build and push"
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
